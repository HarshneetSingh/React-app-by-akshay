    >Explore all the ways of writing css

    >>>>>
    https://www.freecodecamp.org/news/how-to-style-react-apps-with-css/
        
    >how do we configure tailwind?

    >>>>> check the tailwind docs

    >in tailwind.config.js what does all the key mean (content,theme,extend,plugin)?

    >>>>>
        In tailwind.config.js, the following keys have the following meanings:

        content: This key is used to specify the content that PurgeCSS should scan for classes that are being used in your project. By default, 
        PurgeCSS only scans .html, .js, and .jsx files in your project. However, if you have additional file types that contain Tailwind classes,
         you can specify them using this key.

        theme: This key is used to customize the default Tailwind design system. You can use this key to customize colors, fonts, spacing, breakpoints,
         and other properties. The theme key is used to provide a global style configuration for your application.

        extend: This key is used to extend or override the default Tailwind classes. You can use this key to create new utility classes or modify 
        the existing ones. This is particularly useful when you need to add custom styles to your application.

        plugins: This key is used to add custom plugins to Tailwind. Plugins allow you to extend Tailwind's functionality beyond the default set of
         classes. For example, you can use plugins to add new responsive utilities or new variants for existing utilities. Plugins can be created 
         using the @tailwindcss/plugin package.

    >Why do we have .postcssrc file?

    >>>>> in notes


    >what is the use of adding @tailwind base; into css ?

    >>>>>
         Adding @tailwind base; in your CSS file is important because it tells PostCSS to insert the base styles generated by Tailwind CSS.

         The base styles are the styles applied to the standard HTML elements like h1, p, a, and so on. By adding @tailwind base; directive, you ensure 
         -that your HTML elements will have a consistent and cohesive look and feel across your entire project.

         Tailwind CSS base styles provide a starting point for your project, so you can focus on building your UI components on top of a solid foundatio
         -n. By using the base styles, you can avoid writing CSS code from scratch and speed up your development process.

         In summary, adding @tailwind base; to your CSS file ensures that your standard HTML elements are styled consistently throughout your project an
         -d provides a solid foundation for building UI components on top of.

         For example, by default, an h1 tag has a large font size, bold font weight, and some margin and padding. However, the specific values of these 
         -styles may vary between different browsers and devices. When you include @tailwind base; in your CSS file, it sets a standard style for h1 tags
          that is consistent across all browsers and devices, so that your headings have a consistent appearance.

         Tailwind CSS base styles aim to reset or normalize the default styles of HTML elements, so that you have a clean slate to work with when stylin
         -g your project. You can then use the utility classes and components provided by Tailwind to build on top of this foundation and create a custom 
         design for your project.

         So, in summary, @tailwind base; doesn't necessarily override the default styles of HTML elements, but instead sets a consistent baseline of sty
         -les for them.

    >what is the use of adding @tailwind component; into css 

    >>>>>

        Adding @tailwind components; in your CSS file is important because it tells PostCSS to insert the styles for the pre-built components provid
        -ed by Tailwind CSS.

        Tailwind CSS components are pre-built UI elements that you can use to quickly create common UI patterns. For example, components like button
        -s, cards, and forms are included in Tailwind CSS, along with many others.

        By adding @tailwind components; directive, you ensure that the styles for these pre-built components are included in your final CSS output. 
        -This means that you can easily use these components in your HTML without having to write any CSS code yourself.

        In addition to providing pre-built components, Tailwind CSS also allows you to customize these components using CSS variables. This means th
        -at you can easily tweak the styles of the pre-built components to match your project's design.

        So, in summary, adding @tailwind components; to your CSS file ensures that the styles for pre-built UI components are included in your final
        - CSS output. This makes it easy for you to create common UI patterns without having to write any CSS code yourself.

        However, including all of these utility classes in your final CSS output can result in a large file size, which can negatively impact the 
        performance of your website or application. To address this, Tailwind CSS includes an optimization step that removes unused CSS classes from 
        your final CSS output.

        The optimization step is performed automatically by the @fullhuman/postcss-purgecss plugin, which is included in Tailwind CSS by default. 
        This plugin analyzes your HTML and JavaScript files to determine which CSS classes are actually used, and removes any unused classes from 
        the final output.

    >what is the use of adding @tailwind utilitu; into css ?

        When you include the @tailwind utilities; directive in your CSS file, it tells Tailwind CSS to generate all the utility classes that are d
        -efined in your tailwind.config.js file.

        Utility classes are small, single-purpose classes that provide low-level styling options for your HTML elements. They are highly customiza
        -ble and allow you to quickly add styles to your components without writing any CSS.

        For example, Tailwind CSS includes utility classes for things like colors, padding, margins, borders, and more. By including the @tailwind
        - utilities; directive in your CSS file, you can access these utility classes and apply them to your HTML elements as needed.

        It's worth noting that the @tailwind utilities; directive should typically be the last thing included in your CSS file, since it generates
        - a large number of utility classes that can potentially override other styles in your file. By placing it last, you ensure that any other
         styles you've defined in your file take precedence over the utility classes.